from flowfield import FlowField
from vehicle import Vehicle

def setup():
    global debug, flowfield, vehicles
    debug = True
    size(640, 360)
    # Make a new flow field with "resolution" of 16
    flowfield = FlowField(20)
    vehicles = []
    # Make a whole bunch of vehicles with random maxspeed and maxforce values
    for i in range(120):
        vehicles.append(Vehicle(PVector(random(width), random(height)), random(2, 5), random(0.1, 0.5)))
  


def draw():
    background(255)
    # Display the flowfield in "debug" mode
    if (debug):
        flowfield.display()
    # Tell all the vehicles to follow the flow field
    for i in range(len(vehicles)):
        vehicles[i].follow(flowfield)
        vehicles[i].run()
  

  # Instructions
    fill(0)
    text("Hit space bar to toggle debugging lines.\nClick the mouse to generate a new flow field.",10,height-20)



def keyPressed():
    global debug
    if (key == ' '):
        debug = not debug
  


# Make a new flowfield
def mousePressed():
    flowfield.init()
#############################Autoflow_field

class FlowField() :
  def __init__(self, r):
    self.resolution = r
    # Determine the number of columns and self.rows based on sketch's width and height
    self.cols = width/self.resolution
    self.rows = height/self.resolution
    self.field = [[0 for x in range(self.rows)] for y in range(self.cols)]
    print(len(self.field))
    print(len(self.field[0]))
    print(self.cols, self.rows)
    #print(self.field)
    #self.field = [[], []]
    self.init  ()
  
  def init_a(self):
      for i in range(self.cols):
          for j in range(self.rows): 
              self.field[i][j] = PVector(1,0)

  def init_b(self):
      for i in range(self.cols):
          for j in range(self.rows):
              self.field[i][j] = PVector.random2D()


  def init(self):
    # Reseed noise so we get a new flow field every time
    noiseSeed(int(random(10000)))
    xoff = 0
    for i in range(self.cols):
        yoff = 0
        for j in range(self.rows):
            theta = map(noise(xoff,yoff),0,1,0,TWO_PI)
            # Polar to cartesian coordinate transformation to get x and y components of the vector
            self.field[i][j] = PVector(cos(theta),sin(theta))
            yoff += 0.1
      
        xoff += 0.1
    
  

  # Draw every vector
  def display(self):
    for i in range(self.cols):
        for j in range(self.rows):
            self.drawVector(self.field[i][j],i*self.resolution,j*self.resolution,self.resolution-2)
      
    

  

  # Renders a vector object 'v' as an arrow and a position 'x,y'
  def drawVector(self, v, x, y, scayl) :
    pushMatrix()
    arrowsize = 4
    # Translate to position to render vector
    translate(x,y)
    stroke(0,100)
    # Call vector heading function to get direction (note that pointing to the right is a heading of 0) and rotate
    rotate(v.heading2D())
    # Calculate length of vector & scale it to be bigger or smaller if necessary
    len = v.mag()*scayl
    # Draw three lines to make an arrow (draw pointing up since we've rotate to the proper direction)
    line(0,0,len,0)
    line(len,0,len-arrowsize,+arrowsize/2)
    line(len,0,len-arrowsize,-arrowsize/2)
    popMatrix()
  

  def lookup(self, lookup):
    column = int(constrain(lookup.x/self.resolution,0,self.cols-1))
    row = int(constrain(lookup.y/self.resolution,0,self.rows-1))
    return self.field[column][row].get()
  
################flowfield

class Vehicle():
    def __init__(self, l, ms, mf):
        self.pos = l.get()
        self.vel = PVector(0, 0)
        self.acc = PVector(0, 0)
        
        self.maxspeed = ms
        self.maxforce = mf
        self.r = 3
    
    def run(self):
        self.update()
        self.borders()
        self.display()
    
    def follow(self, flow):
        desired = flow.lookup(self.pos)
        # Scale it up by maxspeed
        desired.mult(self.maxspeed)
        # Steering is desired minus velocity
        steer = PVector.sub(desired, self.vel)
        steer.limit(self.maxforce)  # Limit to maximum steering force
        self.applyForce(steer)
        
        
        
    def update(self):
        self.vel.add(self.acc)
        self.vel.limit(self.maxspeed)
        
        self.pos.add(self.vel)
        
        self.acc.mult(0)
        
        
    def applyForce(self, force):
        self.acc.add(force)
        
            
    def display(self):
        fill(127)
        
        theta = self.vel.heading() + PI/2
        
        stroke(0)
        strokeWeight(1)
        
        pushMatrix()
        translate(self.pos.x, self.pos.y)
        rotate(theta)
        beginShape()
        vertex(0, -self.r*2)
        vertex(-self.r, self.r*2)
        vertex(self.r, self.r*2)
        endShape()
        popMatrix()
        
        text(self.maxforce, self.pos.x, self.pos.y)   
        
    def borders(self):
        if (self.pos.x < -self.r):
            self.pos.x = width+self.r
        if (self.pos.y < -self.r): 
            self.pos.y = height+self.r
        if (self.pos.x > width+self.r):
            self.pos.x = -self.r
        if (self.pos.y > height+self.r):
            self.pos.y = -self.r
            
            ###################### vehicle
            
  
class Target():
    
    def __init__(self, x, y):
        self.pos =PVector(x, y)
        self.speed =PVector(1, 1)
    
    def update(self):
        self.pos.x = self.pos.x + self.speed.x
        self.pos.y = self.pos.y + self.speed.y
        self.pos.add(self.speed)
        
        if (self.pos.x > width or self.pos.x <0):
            self.speed.x = -1*self.speed.x
        if (self.pos.y > height or self.pos.y <0):
            self.speed.y = -1*self.speed.y
    
    def display(self):
        fill(255, 0, 0)
        rect(self.pos.x, self.pos.y, 20, 20)
        

#####################target          
      
      


